pipeline {
    agent any

    tools {
        jdk 'JDK 17' // Use the JDK name defined in the Global Tool Configuration
    }

//     parameters {
//         choice(name: 'GIT_BRANCH', choices: ['main', 'feature-branch'], description: 'Select Git branch')
//         choice(name: 'ENVIRONMENT', choices: ['QA', 'UAT'], description: 'Select Environment')
//         choice(name: 'CUCUMBER_TAGS', choices: ['@regression', '@dev', '@smoke'], description: 'Select Cucumber Tags')
//     }

    properties([
        parameters([
            [$class: 'CascadeChoiceParameter',
                name: 'GIT_BRANCH',
                description: 'Select Git Branch',
                randomName: 'choice-parameter',
                filterable: true,
                script: [
                    $class: 'GroovyScript',
                    script: [
                        sandbox: false,
                        script: '''
                            def cmd = "git ls-remote --heads https://your-repo-url.git".execute()
                            def branches = cmd.text.readLines().collect { it.split()[1].replaceAll("refs/heads/", "") }
                            return branches
                        '''
                    ]
                ]
            ],
            choice(name: 'ENVIRONMENT', choices: ['QA', 'UAT'], description: 'Select Environment'),
            choice(name: 'CUCUMBER_TAGS', choices: ['@regression', '@dev', '@smoke'], description: 'Select Cucumber Tags')
        ])
    ])

    stages {
        stage('Checkout Code') {
            steps {
                script {
                    git branch: params.GIT_BRANCH, url: 'https://github.com/UpScript/DataAPI_AcceptanceTest.git'
                }
            }
        }

        stage('Verify Jenkinsfile Exists') {
            steps {
                script {
                    sh "ls -l Jenkinsfile || echo 'Jenkinsfile not found!'"
                }
            }
        }

        stage('Run API Tests') {
            steps {
                script {
                    sh "mvn clean test -Dcucumber.filter.tags=${params.CUCUMBER_TAGS} -Denv=${params.ENVIRONMENT}"
                }
            }
        }

        stage('Publish Cucumber Report') {
            steps {
                publishHTML(target: [
                    reportDir: 'target/cucumber-reports',
                    reportFiles: 'cucumber.html',
                    reportName: 'Data API Test Report'
                ])
            }
        }

        stage('Archive Cucumber Report') {
            steps {
                archiveArtifacts allowEmptyArchive: true, artifacts: 'target/cucumber-reports/cucumber.html', followSymlinks: false
            }
        }

    }
}
